package guru.springframework.msscbeerservice.domain;

import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.UpdateTimestamp;

import javax.persistence.*;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.UUID;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
public class Beer {


//        The UUID's need to be consistent with the inventory service
//        BootLoader @Component now commented out
//        wanted a common UUID>was set in BeerLoader>tried to save in the beerRepository.
//        However the id UUID is being generated by hibernate - a mixture of identity generation is bad in JPA.
// \src\main\resources\data.sql we have sql insert
    
    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    // we are mapping the UUID to a varchar which is easy to read when looking at the DB - maybe a performance penalty he's not sure,
    // you could store them as binaries>which we maybe can decode.
    // without @Type we get this error:- org.h2.jdbc.JdbcSQLDataException: Hexadecimal string contains non-hex character: "0a818933-087d-47f2-ad83-2f986ed087eb"
    @Type(type="org.hibernate.type.UUIDCharType")
    @Column(length = 36, columnDefinition = "varchar", updatable = false, nullable = false)
    private UUID id;

    @Version
    private Long version;

    @CreationTimestamp
    @Column(updatable = false)
    private Timestamp createdDate;

    @UpdateTimestamp
    private Timestamp lastModifiedDate;

    private String beerName;
    private String beerStyle;

    @Column(unique = true)
    private String upc;

    private BigDecimal price;

    private Integer minOnHand;
    private Integer quantityToBrew;


}
